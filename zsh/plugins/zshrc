MINI_ZSH_PLUGIN=${0:A:h}

########### zsh-completions    https://github.com/zsh-users/zsh-completions
[[ -f "$MINI_ZSH_PLUGIN/zsh-completions/zsh-completions.plugin.zsh" ]] && {
    autoload -Uz compinit && compinit
    source "$MINI_ZSH_PLUGIN/zsh-completions/zsh-completions.plugin.zsh"
}

########### zsh-autosuggestions    https://github.com/zsh-users/zsh-autosuggestions
[[ -f "$MINI_ZSH_PLUGIN/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh" ]] && {
    source "$MINI_ZSH_PLUGIN/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh"
}

########### zsh-syntax-highlighting    https://github.com/zsh-users/zsh-syntax-highlighting
[[ -f "$MINI_ZSH_PLUGIN/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh" ]] && {
    source "$MINI_ZSH_PLUGIN/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh"
}

########### zoxide    https://github.com/ajeetdsouza/zoxide
# curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
command -v zoxide > /dev/null && {
    eval "$(zoxide init zsh)"
}

########### fzf
[[ -d "$MINI_ZSH_PLUGIN/fzf" ]] && {
    [[ -f "$MINI_ZSH_PLUGIN/fzf/bin/fzf" ]] || {
        (
            cd "$MINI_ZSH_PLUGIN/fzf"
            make install > /dev/null
        )
    }
    [[ "$PATH" != *$MINI_ZSH_PLUGIN/fzf/bin* ]] && {
        PATH="${PATH:+${PATH}:}$MINI_ZSH_PLUGIN/fzf/bin"
    }
    eval "$(fzf --zsh)"

    ########### fzf    https://github.com/junegunn/fzf
    export FZF_COMPLETION_TRIGGER="\\"
    export FZF_DEFAULT_OPTS="
        --reverse
        --color bg+:#3E4452,border:#3E4452
        --bind 'alt-j:down'
        --bind 'alt-k:up'
        --bind 'tab:accept'
        --bind 'ctrl-j:preview-down'
        --bind 'ctrl-k:preview-up'
        --bind 'alt--:change-preview-window()'
        --bind 'alt-=:change-preview-window(right,99%)'
    "
    ###########
    # https://github.com/wfxr/forgit
    # https://github.com/junegunn/fzf/wiki/Examples
    #
    # pacman install package
    function install() {
        pacman -Slq | fzf -q "$1" -m --preview 'pacman -Si {1}'| xargs -ro sudo pacman -S
    }

    # pacman uninstall package
    function uninstall() {
        pacman -Qq | fzf -q "$1" -m --preview 'pacman -Qi {1}' | xargs -ro sudo pacman -Rns
    }

    function GIT_INSIDE_WORK_TREE() { git rev-parse --is-inside-work-tree > /dev/null }

    # archive all modification files between ${BeginCommit} to ${EndCommit}
    function git_commit_archive() {
        GIT_INSIDE_WORK_TREE || return

        local function error_hash() {
            [[ $1 =~ "^HEAD\^*$" || $1 =~ "^[a-f0-9]+$" ]] && return 1
            return 0
        }

        ( (( $# < 2 )) || error_hash $1 || error_hash $2 ) && {
            echo "Usage: git_commit_archive [BeginCommit] [EndCommit] [Output.zip]" && return
        }

        local BeginCommit=$1 EndCommit=$2 Output=${3:-"Output.zip"}

        [[ $Output =~ "\.zip$" ]] || Output="$Output.zip"

        local ArchiveFiles=$(git diff --name-only $BeginCommit $EndCommit)

        echo "Archive File List:"
        echo $ArchiveFiles | xargs -I % echo -e "\t%"
        echo "====> $Output"

        git archive -o $Output $EndCommit $(git diff --name-only $BeginCommit $EndCommit)
    }
}

########### extract
function x() {
	local remove_archive
	local success
	local extract_dir

	if (( $# == 0 )); then
		cat <<-'EOF' >&2
			Usage: extract [-option] [file ...]

			Options:
			    -r, --remove    Remove archive after unpacking.
		EOF
	fi

	remove_archive=1
	if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then
		remove_archive=0
		shift
	fi

	while (( $# > 0 )); do
		if [[ ! -f "$1" ]]; then
			echo "extract: '$1' is not a valid file" >&2
			shift
			continue
		fi

		success=0
		extract_dir="${1:t:r}"
		case "${1:l}" in
			(*.tar.gz|*.tgz) (( $+commands[pigz] )) && { pigz -dc "$1" | tar xv } || tar zxvf "$1" ;;
			(*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;
			(*.tar.xz|*.txz)
				tar --xz --help &> /dev/null \
				&& tar --xz -xvf "$1" \
				|| xzcat "$1" | tar xvf - ;;
			(*.tar.zma|*.tlz)
				tar --lzma --help &> /dev/null \
				&& tar --lzma -xvf "$1" \
				|| lzcat "$1" | tar xvf - ;;
			(*.tar.zst|*.tzst)
				tar --zstd --help &> /dev/null \
				&& tar --zstd -xvf "$1" \
				|| zstdcat "$1" | tar xvf - ;;
			(*.tar) tar xvf "$1" ;;
			(*.tar.lz) (( $+commands[lzip] )) && tar xvf "$1" ;;
			(*.gz) (( $+commands[pigz] )) && pigz -dk "$1" || gunzip -k "$1" ;;
			(*.bz2) bunzip2 "$1" ;;
			(*.xz) unxz "$1" ;;
			(*.lzma) unlzma "$1" ;;
			(*.z) uncompress "$1" ;;
			(*.zip|*.war|*.jar|*.sublime-package|*.ipsw|*.xpi|*.apk|*.aar|*.whl) unzip "$1" -d $extract_dir ;;
			(*.rar) unrar x -ad "$1" ;;
			(*.rpm) mkdir "$extract_dir" && cd "$extract_dir" && rpm2cpio "../$1" | cpio --quiet -id && cd .. ;;
			(*.7z) 7za x "$1" ;;
			(*.deb)
				mkdir -p "$extract_dir/control"
				mkdir -p "$extract_dir/data"
				cd "$extract_dir"; ar vx "../${1}" > /dev/null
				cd control; tar xzvf ../control.tar.gz
				cd ../data; extract ../data.tar.*
				cd ..; rm *.tar.* debian-binary
				cd ..
			;;
			(*.zst) unzstd "$1" ;;
			(*)
				echo "extract: '$1' cannot be extracted" >&2
				success=1
			;;
		esac

		(( success = $success > 0 ? $success : $? ))
		(( $success == 0 )) && (( $remove_archive == 0 )) && rm "$1"
		shift
	done
}
